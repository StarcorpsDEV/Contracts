{
	"compiler": {
		"version": "0.8.26+commit.8a97fa7a"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "staker",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "rewardAmount",
						"type": "uint256"
					}
				],
				"name": "RewardsClaimed",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "staker",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "uint256[]",
						"name": "tokenIds",
						"type": "uint256[]"
					}
				],
				"name": "TokensStaked",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "staker",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "uint256[]",
						"name": "tokenIds",
						"type": "uint256[]"
					}
				],
				"name": "TokensWithdrawn",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "oldRewardsPerUnitTime",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "newRewardsPerUnitTime",
						"type": "uint256"
					}
				],
				"name": "UpdatedRewardsPerUnitTime",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "oldTimeUnit",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "newTimeUnit",
						"type": "uint256"
					}
				],
				"name": "UpdatedTimeUnit",
				"type": "event"
			},
			{
				"inputs": [],
				"name": "claimRewards",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getRewardTokenBalance",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "_rewardsAvailableInContract",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getRewardsPerUnitTime",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "_rewardsPerUnitTime",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_staker",
						"type": "address"
					}
				],
				"name": "getStakeInfo",
				"outputs": [
					{
						"internalType": "uint256[]",
						"name": "_tokensStaked",
						"type": "uint256[]"
					},
					{
						"internalType": "uint256",
						"name": "_rewards",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getTimeUnit",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "_timeUnit",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"name": "indexedTokens",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"name": "isIndexed",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_rewardsPerUnitTime",
						"type": "uint256"
					}
				],
				"name": "setRewardsPerUnitTime",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_timeUnit",
						"type": "uint256"
					}
				],
				"name": "setTimeUnit",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256[]",
						"name": "_tokenIds",
						"type": "uint256[]"
					}
				],
				"name": "stake",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"name": "stakerAddress",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"name": "stakers",
				"outputs": [
					{
						"internalType": "uint64",
						"name": "amountStaked",
						"type": "uint64"
					},
					{
						"internalType": "uint64",
						"name": "conditionIdOflastUpdate",
						"type": "uint64"
					},
					{
						"internalType": "uint128",
						"name": "timeOfLastUpdate",
						"type": "uint128"
					},
					{
						"internalType": "uint256",
						"name": "unclaimedRewards",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"name": "stakersArray",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "stakingToken",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256[]",
						"name": "_tokenIds",
						"type": "uint256[]"
					}
				],
				"name": "withdraw",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			}
		],
		"devdoc": {
			"events": {
				"RewardsClaimed(address,uint256)": {
					"details": "Emitted when a staker claims staking rewards."
				},
				"TokensStaked(address,uint256[])": {
					"details": "Emitted when a set of token-ids are staked."
				},
				"TokensWithdrawn(address,uint256[])": {
					"details": "Emitted when a set of staked token-ids are withdrawn."
				},
				"UpdatedRewardsPerUnitTime(uint256,uint256)": {
					"details": "Emitted when contract admin updates rewardsPerUnitTime."
				},
				"UpdatedTimeUnit(uint256,uint256)": {
					"details": "Emitted when contract admin updates timeUnit."
				}
			},
			"kind": "dev",
			"methods": {
				"claimRewards()": {
					"details": "See {_claimRewards}. Override that to implement custom logic.             See {_calculateRewards} for reward-calculation logic."
				},
				"getStakeInfo(address)": {
					"params": {
						"_staker": "Address for which to calculated rewards."
					},
					"returns": {
						"_rewards": "       Available reward amount.",
						"_tokensStaked": "  List of token-ids staked by staker."
					}
				},
				"setRewardsPerUnitTime(uint256)": {
					"details": "Only admin/authorized-account can call it.",
					"params": {
						"_rewardsPerUnitTime": "New rewards per unit time."
					}
				},
				"setTimeUnit(uint256)": {
					"details": "Only admin/authorized-account can call it.",
					"params": {
						"_timeUnit": "New time unit."
					}
				},
				"stake(uint256[])": {
					"details": "See {_stake}. Override that to implement custom logic.",
					"params": {
						"_tokenIds": "List of tokens to stake."
					}
				},
				"withdraw(uint256[])": {
					"details": "See {_withdraw}. Override that to implement custom logic.",
					"params": {
						"_tokenIds": "List of tokens to withdraw."
					}
				}
			},
			"stateVariables": {
				"indexedTokens": {
					"details": "List of token-ids ever staked."
				},
				"isIndexed": {
					"details": "Mapping from token-id to whether it is indexed or not."
				},
				"isStaking": {
					"details": "Flag to check direct transfers of staking tokens."
				},
				"nextConditionId": {
					"details": "Next staking condition Id. Tracks number of conditon updates so far."
				},
				"stakerAddress": {
					"details": "Mapping from staked token-id to staker address."
				},
				"stakers": {
					"details": "Mapping from staker address to Staker struct. See {struct IStaking721.Staker}."
				},
				"stakersArray": {
					"details": "List of accounts that have staked their NFTs."
				},
				"stakingConditions": {
					"details": "Mapping from condition Id to staking condition. See {struct IStaking721.StakingCondition}"
				},
				"stakingToken": {
					"details": "Address of ERC721 NFT contract -- staked tokens belong to this contract."
				}
			},
			"version": 1
		},
		"userdoc": {
			"kind": "user",
			"methods": {
				"claimRewards()": {
					"notice": "Claim accumulated rewards."
				},
				"getRewardTokenBalance()": {
					"notice": "View total rewards available in the staking contract."
				},
				"getStakeInfo(address)": {
					"notice": "View amount staked and total rewards for a user."
				},
				"setRewardsPerUnitTime(uint256)": {
					"notice": "Set rewards per unit of time.           Interpreted as x rewards per second/per day/etc based on time-unit."
				},
				"setTimeUnit(uint256)": {
					"notice": "Set time unit. Set as a number of seconds.           Could be specified as -- x * 1 hours, x * 1 days, etc."
				},
				"stake(uint256[])": {
					"notice": "Stake ERC721 Tokens."
				},
				"withdraw(uint256[])": {
					"notice": "Withdraw staked tokens."
				}
			},
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"nft-staking-tokenid/extension/Staking721.sol": "Staking721"
		},
		"evmVersion": "cancun",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": true,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"nft-staking-tokenid/eip/interface/IERC721.sol": {
			"keccak256": "0x00754fd93079350acb6b1d0451320cc4b4252bf7990aa39cde29abb5ca4a60ea",
			"license": "MIT",
			"urls": [
				"bzz-raw://c91392521b426c02b342d4ba0f2c5cad2c6074e1be90203c9525751dd23b36bf",
				"dweb:/ipfs/QmNjjCttJ9A39HMn3FTMqjQN5y7UoQrPUhQ7Nd8Ci7jFZj"
			]
		},
		"nft-staking-tokenid/extension/Staking721.sol": {
			"keccak256": "0x6400cb7e6ca71b87f61367bc321b167642f93597bc0025bdc81f1f03df98d27e",
			"license": "Apache-2.0",
			"urls": [
				"bzz-raw://aba8bf2bfb40890f0f4e2ea1ffa80b3c8e1b360435171e6747cdcc7a8a12e81d",
				"dweb:/ipfs/QmfQpcRzYvG4BDkZU1jqsU3rNpuWDobXGxZ3Dboxt8ypfU"
			]
		},
		"nft-staking-tokenid/extension/interface/IStaking721.sol": {
			"keccak256": "0x8d0d1508daad0e427ccd002fdd7adc25261930bb32e21bdb90af354ed37f7076",
			"license": "Apache-2.0",
			"urls": [
				"bzz-raw://00e7d2ebe66cdd849690933146070e65f36ebb59487a4028bca4b9d8d4635e89",
				"dweb:/ipfs/QmRfSUDHE2rVGkfHuYtHLbJpvtTc1gw4SUcpuyqL8pH2iS"
			]
		},
		"nft-staking-tokenid/external-deps/openzeppelin/security/ReentrancyGuard.sol": {
			"keccak256": "0x2030bba0e41fb3daead24cdba39cd9d8ce2748de68e57f1c811420419a739afb",
			"license": "MIT",
			"urls": [
				"bzz-raw://1a64e19e10d66555abcf0b5392bb27f9e65f674d7688761f02f2c8b508490623",
				"dweb:/ipfs/QmNhMchAD6kuHFAAgdwCwuNUS3uaUD2gwofT5kxQAQeWH6"
			]
		},
		"nft-staking-tokenid/external-deps/openzeppelin/utils/math/SafeMath.sol": {
			"keccak256": "0xa80cb30fccbba7c8ff72ac82cc898576a78d4c3031e85676840048f3fe195f5d",
			"license": "MIT",
			"urls": [
				"bzz-raw://22fff2b2370631317e0e4bf36eabb136e96f1db5d5993c61e13b27d7615b504f",
				"dweb:/ipfs/QmfTW395az3LUhe3Gm5BUCwkaj9Sk1fURZKvHL2XzDHYQk"
			]
		}
	},
	"version": 1
}