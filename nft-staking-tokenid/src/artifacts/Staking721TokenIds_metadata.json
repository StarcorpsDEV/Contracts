{
	"compiler": {
		"version": "0.8.26+commit.8a97fa7a"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_defaultAdmin",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "_timeUnit",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "_rewardsPerUnitTime",
						"type": "uint256"
					},
					{
						"internalType": "address",
						"name": "_stakingToken",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "_rewardToken",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "_nativeTokenWrapper",
						"type": "address"
					},
					{
						"internalType": "uint256[]",
						"name": "_stakingTokenAllowedId",
						"type": "uint256[]"
					}
				],
				"stateMutability": "nonpayable",
				"type": "constructor"
			},
			{
				"inputs": [],
				"name": "ContractMetadataUnauthorized",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "expected",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "actual",
						"type": "uint256"
					}
				],
				"name": "CurrencyTransferLibMismatchedValue",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "OwnableUnauthorized",
				"type": "error"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "string",
						"name": "prevURI",
						"type": "string"
					},
					{
						"indexed": false,
						"internalType": "string",
						"name": "newURI",
						"type": "string"
					}
				],
				"name": "ContractURIUpdated",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "prevOwner",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "newOwner",
						"type": "address"
					}
				],
				"name": "OwnerUpdated",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "staker",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "rewardAmount",
						"type": "uint256"
					}
				],
				"name": "RewardsClaimed",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "staker",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "uint256[]",
						"name": "tokenIds",
						"type": "uint256[]"
					}
				],
				"name": "TokensStaked",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "staker",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "uint256[]",
						"name": "tokenIds",
						"type": "uint256[]"
					}
				],
				"name": "TokensWithdrawn",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "oldRewardsPerUnitTime",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "newRewardsPerUnitTime",
						"type": "uint256"
					}
				],
				"name": "UpdatedRewardsPerUnitTime",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "oldTimeUnit",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "newTimeUnit",
						"type": "uint256"
					}
				],
				"name": "UpdatedTimeUnit",
				"type": "event"
			},
			{
				"inputs": [],
				"name": "claimRewards",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "contractURI",
				"outputs": [
					{
						"internalType": "string",
						"name": "",
						"type": "string"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_amount",
						"type": "uint256"
					}
				],
				"name": "depositRewardTokens",
				"outputs": [],
				"stateMutability": "payable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getRewardTokenBalance",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getRewardsPerUnitTime",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "_rewardsPerUnitTime",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_staker",
						"type": "address"
					}
				],
				"name": "getStakeInfo",
				"outputs": [
					{
						"internalType": "uint256[]",
						"name": "_tokensStaked",
						"type": "uint256[]"
					},
					{
						"internalType": "uint256",
						"name": "_rewards",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getTimeUnit",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "_timeUnit",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"name": "indexedTokens",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"name": "isIndexed",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes[]",
						"name": "data",
						"type": "bytes[]"
					}
				],
				"name": "multicall",
				"outputs": [
					{
						"internalType": "bytes[]",
						"name": "results",
						"type": "bytes[]"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "nativeTokenWrapper",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					},
					{
						"internalType": "bytes",
						"name": "",
						"type": "bytes"
					}
				],
				"name": "onERC721Received",
				"outputs": [
					{
						"internalType": "bytes4",
						"name": "",
						"type": "bytes4"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "owner",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "rewardToken",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "string",
						"name": "_uri",
						"type": "string"
					}
				],
				"name": "setContractURI",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_newOwner",
						"type": "address"
					}
				],
				"name": "setOwner",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_rewardsPerUnitTime",
						"type": "uint256"
					}
				],
				"name": "setRewardsPerUnitTime",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_timeUnit",
						"type": "uint256"
					}
				],
				"name": "setTimeUnit",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256[]",
						"name": "_tokenIds",
						"type": "uint256[]"
					}
				],
				"name": "stake",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"name": "stakerAddress",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"name": "stakers",
				"outputs": [
					{
						"internalType": "uint64",
						"name": "amountStaked",
						"type": "uint64"
					},
					{
						"internalType": "uint64",
						"name": "conditionIdOflastUpdate",
						"type": "uint64"
					},
					{
						"internalType": "uint128",
						"name": "timeOfLastUpdate",
						"type": "uint128"
					},
					{
						"internalType": "uint256",
						"name": "unclaimedRewards",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"name": "stakersArray",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "stakingToken",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"name": "stakingTokenAllowedId",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes4",
						"name": "interfaceId",
						"type": "bytes4"
					}
				],
				"name": "supportsInterface",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256[]",
						"name": "_tokenIds",
						"type": "uint256[]"
					}
				],
				"name": "withdraw",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_amount",
						"type": "uint256"
					}
				],
				"name": "withdrawRewardTokens",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"stateMutability": "payable",
				"type": "receive"
			}
		],
		"devdoc": {
			"errors": {
				"ContractMetadataUnauthorized()": [
					{
						"details": "The sender is not authorized to perform the action"
					}
				],
				"OwnableUnauthorized()": [
					{
						"details": "The sender is not authorized to perform the action"
					}
				]
			},
			"events": {
				"ContractURIUpdated(string,string)": {
					"details": "Emitted when the contract URI is updated."
				},
				"OwnerUpdated(address,address)": {
					"details": "Emitted when a new Owner is set."
				},
				"RewardsClaimed(address,uint256)": {
					"details": "Emitted when a staker claims staking rewards."
				},
				"TokensStaked(address,uint256[])": {
					"details": "Emitted when a set of token-ids are staked."
				},
				"TokensWithdrawn(address,uint256[])": {
					"details": "Emitted when a set of staked token-ids are withdrawn."
				},
				"UpdatedRewardsPerUnitTime(uint256,uint256)": {
					"details": "Emitted when contract admin updates rewardsPerUnitTime."
				},
				"UpdatedTimeUnit(uint256,uint256)": {
					"details": "Emitted when contract admin updates timeUnit."
				}
			},
			"kind": "dev",
			"methods": {
				"claimRewards()": {
					"details": "See {_claimRewards}. Override that to implement custom logic.             See {_calculateRewards} for reward-calculation logic."
				},
				"depositRewardTokens(uint256)": {
					"details": "Admin deposits reward tokens."
				},
				"getStakeInfo(address)": {
					"params": {
						"_staker": "Address for which to calculated rewards."
					},
					"returns": {
						"_rewards": "       Available reward amount.",
						"_tokensStaked": "  List of token-ids staked by staker."
					}
				},
				"multicall(bytes[])": {
					"details": "Receives and executes a batch of function calls on this contract.",
					"params": {
						"data": "The bytes data that makes up the batch of function calls to execute."
					},
					"returns": {
						"results": "The bytes data that makes up the result of the batch of function calls executed."
					}
				},
				"setContractURI(string)": {
					"details": "Caller should be authorized to setup contractURI, e.g. contract admin.                  See {_canSetContractURI}.                  Emits {ContractURIUpdated Event}.",
					"params": {
						"_uri": "keccak256 hash of the role. e.g. keccak256(\"TRANSFER_ROLE\")"
					}
				},
				"setOwner(address)": {
					"params": {
						"_newOwner": "The address to set as the new owner of the contract."
					}
				},
				"setRewardsPerUnitTime(uint256)": {
					"details": "Only admin/authorized-account can call it.",
					"params": {
						"_rewardsPerUnitTime": "New rewards per unit time."
					}
				},
				"setTimeUnit(uint256)": {
					"details": "Only admin/authorized-account can call it.",
					"params": {
						"_timeUnit": "New time unit."
					}
				},
				"stake(uint256[])": {
					"details": "See {_stake}. Override that to implement custom logic.",
					"params": {
						"_tokenIds": "List of tokens to stake."
					}
				},
				"supportsInterface(bytes4)": {
					"details": "See {IERC165-supportsInterface}."
				},
				"withdraw(uint256[])": {
					"details": "See {_withdraw}. Override that to implement custom logic.",
					"params": {
						"_tokenIds": "List of tokens to withdraw."
					}
				},
				"withdrawRewardTokens(uint256)": {
					"details": "Admin can withdraw excess reward tokens."
				}
			},
			"stateVariables": {
				"nativeTokenWrapper": {
					"details": "The address of the native token wrapper contract."
				},
				"rewardToken": {
					"details": "ERC20 Reward Token address. See {_mintRewards} below."
				},
				"rewardTokenBalance": {
					"details": "Total amount of reward tokens in the contract."
				}
			},
			"version": 1
		},
		"userdoc": {
			"kind": "user",
			"methods": {
				"claimRewards()": {
					"notice": "Claim accumulated rewards."
				},
				"contractURI()": {
					"notice": "Returns the contract metadata URI."
				},
				"getRewardTokenBalance()": {
					"notice": "View total rewards available in the staking contract."
				},
				"getStakeInfo(address)": {
					"notice": "View amount staked and total rewards for a user."
				},
				"multicall(bytes[])": {
					"notice": "Receives and executes a batch of function calls on this contract."
				},
				"owner()": {
					"notice": "Returns the owner of the contract."
				},
				"setContractURI(string)": {
					"notice": "Lets a contract admin set the URI for contract-level metadata."
				},
				"setOwner(address)": {
					"notice": "Lets an authorized wallet set a new owner for the contract."
				},
				"setRewardsPerUnitTime(uint256)": {
					"notice": "Set rewards per unit of time.           Interpreted as x rewards per second/per day/etc based on time-unit."
				},
				"setTimeUnit(uint256)": {
					"notice": "Set time unit. Set as a number of seconds.           Could be specified as -- x * 1 hours, x * 1 days, etc."
				},
				"stake(uint256[])": {
					"notice": "Stake ERC721 Tokens."
				},
				"withdraw(uint256[])": {
					"notice": "Withdraw staked tokens."
				}
			},
			"notice": "note: This contract is provided as a base contract.",
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"nft-staking-tokenid/src/ERC721StakingTokenIds.sol": "Staking721TokenIds"
		},
		"evmVersion": "cancun",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": true,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"nft-staking-tokenid/eip/ERC165.sol": {
			"keccak256": "0x0ea604ea6ebe99809a2f620009c8dead82d7fb17ab12b734e1e29c8ceb85938b",
			"license": "MIT",
			"urls": [
				"bzz-raw://d9d109154c913e34d107db2cec5608dd8a55075dee35ae77aa78ebb9ff7d856c",
				"dweb:/ipfs/QmW8QKw4kag1Bv68FjSZiGvPP8WDocjdhLSd3ssUXZ5Kgr"
			]
		},
		"nft-staking-tokenid/eip/interface/IERC165.sol": {
			"keccak256": "0x35d0a916f70344a5fcc6c67cb531b6150d2fce43e72a6282385eab02020f2f49",
			"license": "MIT",
			"urls": [
				"bzz-raw://75ccd8b9a8b52a93b8097fcb8181b7afb6d72bbe6eaabf434f0481a7a207cc8a",
				"dweb:/ipfs/QmPUZAEE4nwkijcE2amAXAWEVGVG5XaKWGhpgnRwpAf93R"
			]
		},
		"nft-staking-tokenid/eip/interface/IERC20.sol": {
			"keccak256": "0x458d6ffd4d79153b9bfca794efa8169bbb942b47723153e6d2b0051e2cd9dcf1",
			"license": "Apache-2.0",
			"urls": [
				"bzz-raw://a08cdc1bfc92ed80fc6686fb51a018b896ee862ac9fa1a1599b3fa0198760ce8",
				"dweb:/ipfs/QmTxqXNnbht1GfzkTAKpQnpZdEADS9YXZdE8Cdr6cSJrNP"
			]
		},
		"nft-staking-tokenid/eip/interface/IERC721.sol": {
			"keccak256": "0x00754fd93079350acb6b1d0451320cc4b4252bf7990aa39cde29abb5ca4a60ea",
			"license": "MIT",
			"urls": [
				"bzz-raw://c91392521b426c02b342d4ba0f2c5cad2c6074e1be90203c9525751dd23b36bf",
				"dweb:/ipfs/QmNjjCttJ9A39HMn3FTMqjQN5y7UoQrPUhQ7Nd8Ci7jFZj"
			]
		},
		"nft-staking-tokenid/eip/interface/IERC721Receiver.sol": {
			"keccak256": "0xd5fa74b4fb323776fa4a8158800fec9d5ac0fec0d6dd046dd93798632ada265f",
			"license": "MIT",
			"urls": [
				"bzz-raw://33017a30a99cc5411a9e376622c31fc4a55cfc6a335e2f57f00cbf24a817ff3f",
				"dweb:/ipfs/QmWNQtWTPhA7Lo8nbxbc8KFMvZwbFYB8fSeEQ3vuapSV4a"
			]
		},
		"nft-staking-tokenid/extension/ContractMetadata.sol": {
			"keccak256": "0x0752a8a6eeb7e61acfe50e39344c16258a89cfaa55fc9db9289dc6e18ae7af66",
			"license": "Apache-2.0",
			"urls": [
				"bzz-raw://6ca1ffdbc96af19fa17e23fd8a1aebe2d5849e63ded33805228b26f1901125e8",
				"dweb:/ipfs/QmckQ7iwwm9LuywfpuYP7Y7AcUW8yNy1eDL741ug8w1wyv"
			]
		},
		"nft-staking-tokenid/extension/Multicall.sol": {
			"keccak256": "0xe4479833f6297a1461478733e14dd0e9b8376da474fa7067cb8937f9ccff2836",
			"license": "Apache 2.0",
			"urls": [
				"bzz-raw://b03c41daeba7783e04387eff65f6ccc50f2312d895ff3cb9198410976df19c4e",
				"dweb:/ipfs/QmV54V9YQn9TWZhoAsFex8GdCkQmFX6iajYnUv5zU1sxEQ"
			]
		},
		"nft-staking-tokenid/extension/Ownable.sol": {
			"keccak256": "0xd5edceecc8eee7460707d4c078f8273e8e488ab76cd2dcfaab36bd48e7f8bfaa",
			"license": "Apache-2.0",
			"urls": [
				"bzz-raw://0e0a2692225385848e6b781dd54381e27d7287be46033a00b67d3c66d19bb1a3",
				"dweb:/ipfs/QmStFLkQwcpTtzNefx4yxNxmHbf4WdVSzkSNEN97vaWzyg"
			]
		},
		"nft-staking-tokenid/extension/Staking721TokenId.sol": {
			"keccak256": "0x9098a3cee6d0d9cac4e697993fa0cb95afad73f82ff33eedd800fcc2520310cb",
			"license": "Apache-2.0",
			"urls": [
				"bzz-raw://640c838f0bca3732cf528b09da6d9124f11f5024a571c6627f5ed928dd1cccb9",
				"dweb:/ipfs/QmYmWVfyS3UrGfhmY1uXLkjsBktNXe9wgo1XqF76K6AH2u"
			]
		},
		"nft-staking-tokenid/extension/interface/IContractMetadata.sol": {
			"keccak256": "0x41d3f7f43c124e9ff0247cb94f4e8fc8c5a79b1de331c67eb03654154248d7f2",
			"license": "Apache-2.0",
			"urls": [
				"bzz-raw://fa8d6251cf3a876193cc719b456c02ff23d3f2d5486431e9bdaf290be9a4ce9a",
				"dweb:/ipfs/QmRwnA2q15Vdkc66fz6BAinZM3tjuVNHn5CeGzc7ZFMAzr"
			]
		},
		"nft-staking-tokenid/extension/interface/IMulticall.sol": {
			"keccak256": "0xe2bbd37b8fdb9cc8b933e598512a068ebb214b3f5abc2bc634916def55be4ef3",
			"license": "MIT",
			"urls": [
				"bzz-raw://012352099c262348ac755a53b082af520babc6c66dc5f1251fc23609728340ca",
				"dweb:/ipfs/QmcXEgzQ53jdJX5ZNy8zivvUjDq7J8WTnR1yAiwTpkQ2ar"
			]
		},
		"nft-staking-tokenid/extension/interface/IOwnable.sol": {
			"keccak256": "0xd659a64da6264fdd50ee379be032fea4917eba4fadfd6d366107fb17e46907f3",
			"license": "Apache-2.0",
			"urls": [
				"bzz-raw://c15940c4a3d229f4fdd1226fe297a58fde10b07b86a34de1ed11a8802dd5dea9",
				"dweb:/ipfs/QmS8p8CxWiahLkYsCWNhFjCnmQzuc4ck3kjYYuCFj8LsmC"
			]
		},
		"nft-staking-tokenid/extension/interface/IStaking721.sol": {
			"keccak256": "0x8d0d1508daad0e427ccd002fdd7adc25261930bb32e21bdb90af354ed37f7076",
			"license": "Apache-2.0",
			"urls": [
				"bzz-raw://00e7d2ebe66cdd849690933146070e65f36ebb59487a4028bca4b9d8d4635e89",
				"dweb:/ipfs/QmRfSUDHE2rVGkfHuYtHLbJpvtTc1gw4SUcpuyqL8pH2iS"
			]
		},
		"nft-staking-tokenid/external-deps/openzeppelin/security/ReentrancyGuard.sol": {
			"keccak256": "0x2030bba0e41fb3daead24cdba39cd9d8ce2748de68e57f1c811420419a739afb",
			"license": "MIT",
			"urls": [
				"bzz-raw://1a64e19e10d66555abcf0b5392bb27f9e65f674d7688761f02f2c8b508490623",
				"dweb:/ipfs/QmNhMchAD6kuHFAAgdwCwuNUS3uaUD2gwofT5kxQAQeWH6"
			]
		},
		"nft-staking-tokenid/external-deps/openzeppelin/token/ERC20/utils/SafeERC20.sol": {
			"keccak256": "0x87a5e71a483d7904e96e5eb050220207c79421cb36d6d56d3017636e0a17d4d6",
			"license": "MIT",
			"urls": [
				"bzz-raw://36c38f48bc197bc50c61e15cab33ac6440c1090db027947cb5a5c99ad6960315",
				"dweb:/ipfs/QmcEKQgqdyBvFWwTrWe7e4jr3oxZVDgPZ3RykML2MrWad8"
			]
		},
		"nft-staking-tokenid/external-deps/openzeppelin/utils/math/SafeMath.sol": {
			"keccak256": "0xa80cb30fccbba7c8ff72ac82cc898576a78d4c3031e85676840048f3fe195f5d",
			"license": "MIT",
			"urls": [
				"bzz-raw://22fff2b2370631317e0e4bf36eabb136e96f1db5d5993c61e13b27d7615b504f",
				"dweb:/ipfs/QmfTW395az3LUhe3Gm5BUCwkaj9Sk1fURZKvHL2XzDHYQk"
			]
		},
		"nft-staking-tokenid/infra/interface/IWETH.sol": {
			"keccak256": "0x5c1df76e8c1d9b5c069e4c0e35c3ad3316530c382fe3ddc6c21584f5e56f0a7b",
			"license": "Apache-2.0",
			"urls": [
				"bzz-raw://1ff3429e0845d3266dd65ce097e194008511940a6f9fe651578b19737d37f2b1",
				"dweb:/ipfs/QmdnrZ7hr7BezqyhrmKTzTovbTjQYT5EcDYfvRYxxYFVeU"
			]
		},
		"nft-staking-tokenid/lib/Address.sol": {
			"keccak256": "0xa1e2c06c07422ce6f27ab1c4d4ce62bdc3200e082b735b5e3a75c2e7b61cbc4f",
			"license": "Apache-2.0",
			"urls": [
				"bzz-raw://cc90229c980f78c582a05386d4621172c7d20dec9ad528a5bf1d59b243fff0a5",
				"dweb:/ipfs/QmcZZLaZ9XU1gWj7b9EBZftPoED3pKEvvFGhS5yBvtMPtn"
			]
		},
		"nft-staking-tokenid/lib/CurrencyTransferLib.sol": {
			"keccak256": "0x92d751d69f2bda27379e1dd903eb4fbdd7cbaa1bce4bebe492405b9bb9a04395",
			"license": "Apache-2.0",
			"urls": [
				"bzz-raw://aa34322ae5bd6f4d9821c403fb74055013d3f14a35491556bc7a9250aebbc38d",
				"dweb:/ipfs/QmVjtbJh2YdMN7QY4bPBLgjMDwX1A7Yu3Tr5Q5ndJqkXkR"
			]
		},
		"nft-staking-tokenid/src/ERC721StakingTokenIds.sol": {
			"keccak256": "0x80849d8ab51a0a368c79d3a935d57ad702ac5da6768ff74d9474ee663efbcb89",
			"license": "Apache-2.0",
			"urls": [
				"bzz-raw://3361f38914447af62e3cd1b3795800e4652c271d25077e14db5b0f468fb9766a",
				"dweb:/ipfs/QmZN1Ufz6jwZRDx6Qe937qsqGtKv3vjUMAr4ZvR5TdaTah"
			]
		}
	},
	"version": 1
}